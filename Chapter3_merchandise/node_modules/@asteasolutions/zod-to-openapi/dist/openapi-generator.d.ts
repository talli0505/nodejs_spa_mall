import { OpenAPIObject, InfoObject, ServerObject, SecurityRequirementObject, TagObject, ExternalDocumentationObject, ComponentsObject } from 'openapi3-ts';
import { OpenAPIDefinitions } from './openapi-registry';
interface OpenAPIObjectConfig {
    openapi: string;
    info: InfoObject;
    servers?: ServerObject[];
    security?: SecurityRequirementObject[];
    tags?: TagObject[];
    externalDocs?: ExternalDocumentationObject;
}
export declare class OpenAPIGenerator {
    private definitions;
    private schemaRefs;
    private paramRefs;
    private pathRefs;
    private rawComponents;
    constructor(definitions: OpenAPIDefinitions[]);
    generateDocument(config: OpenAPIObjectConfig): OpenAPIObject;
    generateComponents(): ComponentsObject;
    private buildComponents;
    private sortDefinitions;
    private generateSingle;
    private generateParameterDefinition;
    private getParameterRef;
    private generateInlineParameters;
    private generateParameter;
    /**
     * Generates an OpenAPI SchemaObject or a ReferenceObject with all the provided metadata applied
     */
    private generateSimpleSchema;
    private generateInnerSchema;
    private generateSchemaDefinition;
    private getRequestBody;
    private getParameters;
    private generateSingleRoute;
    private getResponse;
    private descriptionFromResponseConfig;
    private toOpenAPISchema;
    private isOptionalSchema;
    private toOpenAPIObjectSchema;
    private flattenUnionTypes;
    private flattenIntersectionTypes;
    private unwrapChained;
    private buildSchemaMetadata;
    private buildParameterMetadata;
    private getMetadata;
    private applySchemaMetadata;
}
export {};
