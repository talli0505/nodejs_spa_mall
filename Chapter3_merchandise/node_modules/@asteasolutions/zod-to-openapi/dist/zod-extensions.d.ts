import { ParameterObject, SchemaObject } from 'openapi3-ts';
import type { z } from 'zod';
export interface ZodOpenAPIMetadata<T = any> extends SchemaObject {
    refId?: string;
    extendedFrom?: string;
    param?: Partial<ParameterObject> & {
        example?: T;
    };
    example?: T;
}
declare module 'zod' {
    interface ZodTypeDef {
        openapi?: ZodOpenAPIMetadata;
    }
    abstract class ZodSchema<Output, Def extends ZodTypeDef, Input = Output> {
        openapi<T extends ZodSchema<any>>(this: T, metadata: Partial<ZodOpenAPIMetadata<z.infer<T>>>): T;
    }
}
export declare function extendZodWithOpenApi(zod: typeof z): void;
